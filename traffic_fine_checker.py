
import time
import schedule
import pytesseract
from PIL import Image
from io import BytesIO
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import cv2
import numpy as np
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://github.com/[username]/traffic-fine-checker.git
git push -u origin main

# C·∫•u h√¨nh Tesseract OCR (thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n ph√π h·ª£p v·ªõi m√°y b·∫°n)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

def check_traffic_fine():
    try:
        # Kh·ªüi t·∫°o tr√¨nh duy·ªát Chrome
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')  # Ch·∫°y ·∫©n tr√¨nh duy·ªát
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        
        # Truy c·∫≠p trang tra c·ª©u
        print("ƒêang truy c·∫≠p website CSGT...")
        driver.get("https://www.csgt.vn/tra-cuu-phuong-tien-vi-pham.htm")
        time.sleep(3)
        
        # Nh·∫≠p th√¥ng tin bi·ªÉn s·ªë xe
        print("ƒêang nh·∫≠p bi·ªÉn s·ªë xe...")
        license_plate = driver.find_element(By.ID, "BienSo")
        license_plate.clear()
        license_plate.send_keys("92D1-92.632632")  # Thay b·∫±ng bi·ªÉn s·ªë th·ª±c
        
        # Ch·ªçn lo·∫°i ph∆∞∆°ng ti·ªán
        print("ƒêang ch·ªçn lo·∫°i ph∆∞∆°ng ti·ªán...")
        vehicle_type = Select(driver.find_element(By.ID, "LoaiPhuongTien"))
        vehicle_type.select_by_visible_text("√î t√¥")
        time.sleep(1)
        
        # X·ª≠ l√Ω CAPTCHA
        print("ƒêang x·ª≠ l√Ω CAPTCHA...")
        captcha_element = driver.find_element(By.ID, "CaptchaImage")
        captcha_screenshot = captcha_element.screenshot_as_png
        
        # Chuy·ªÉn ƒë·ªïi ·∫£nh CAPTCHA
        img = Image.open(BytesIO(captcha_screenshot))
        img = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
        
        # X·ª≠ l√Ω ·∫£nh ƒë·ªÉ nh·∫≠n d·∫°ng t·ªët h∆°n
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        
        # Nh·∫≠n d·∫°ng vƒÉn b·∫£n t·ª´ ·∫£nh
        captcha_text = pytesseract.image_to_string(thresh, 
                                                 config='--psm 8 --oem 3 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
        captcha_text = ''.join(e for e in captcha_text if e.isalnum())
        print(f"CAPTCHA nh·∫≠n d·∫°ng ƒë∆∞·ª£c: {captcha_text}")
        
        # Nh·∫≠p CAPTCHA
        captcha_input = driver.find_element(By.ID, "CaptchaInputText")
        captcha_input.clear()
        captcha_input.send_keys(captcha_text)
        time.sleep(1)
        
        # Th·ª±c hi·ªán tra c·ª©u
        print("ƒêang th·ª±c hi·ªán tra c·ª©u...")
        search_button = driver.find_element(By.ID, "btnSearch")
        search_button.click()
        time.sleep(5)
        
        # L·∫•y k·∫øt qu·∫£
        result = driver.find_element(By.ID, "grdDanhSachViPham")
        if "Kh√¥ng t√¨m th·∫•y" in result.text:
            print("‚úÖ Kh√¥ng c√≥ vi ph·∫°m n√†o ƒë∆∞·ª£c ghi nh·∫≠n")
        else:
            print("‚ö†Ô∏è Ph√°t hi·ªán vi ph·∫°m:")
            print(result.text)
            
            # L∆∞u k·∫øt qu·∫£
            timestamp = time.strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"ket_qua_phat_nguoi_{timestamp}.txt"
            with open(filename, "w", encoding="utf-8") as f:
                f.write(result.text)
            print(f"ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o file: {filename}")
        
    except Exception as e:
        print(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
    finally:
        driver.quit()
        print("Ho√†n t·∫•t quy tr√¨nh tra c·ª©u\n")

# L·∫≠p l·ªãch ch·∫°y
schedule.every().day.at("06:00").do(check_traffic_fine)
schedule.every().day.at("12:00").do(check_traffic_fine)

if __name__ == "__main__":
    print("üöî B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh tra c·ª©u ph·∫°t ngu·ªôi t·ª± ƒë·ªông")
    print("L·ªãch ch·∫°y: 6:00 v√† 12:00 h√†ng ng√†y\n")
    
    # Ch·∫°y ngay l·∫ßn ƒë·∫ßu ti√™n
    check_traffic_fine()
    
    # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
    while True:
        schedule.run_pending()
        time.sleep(1)